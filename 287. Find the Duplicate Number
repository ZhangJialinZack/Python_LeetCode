287. Find the Duplicate Number
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.


Python代码：
class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # 方法一
        # 将数组映射为链表 nums[0] = a, nums[a] = b, nums[b] = c, ……
        # 如果有重复项 说明至少有两个节点指向同一数据，即链表有环  求环的入口数据
        
        # slow = 0  #慢指针
        # fast = 0  #快指针
        # while True:
        #     slow = nums[slow]
        #     fast = nums[nums[fast]]
        #     if slow == fast:  # 追踪到相等数据
        #         break
            
        # finder = 0      # 从头开始追击
        # while True:
        #     finder = nums[finder]
        #     slow = nums[slow]
        #     if finder == slow:
        #         return slow
                
        # 方法二
        low = 1
        high = len(nums)-1
        while(low <= high):
            mid = (low + high) / 2
            cnt = sum(i <= mid for i in nums)
            if(cnt > mid):
                high = mid - 1
            else:
                low = mid + 1
        return low

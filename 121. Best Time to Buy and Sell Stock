121. Best Time to Buy and Sell Stock
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.


Python代码：
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        # 方法一
        # 1.找到所有最小值所在位置下标
        # 2.找到最小值下标后区间中的最大值
        # 3.找出所有区间内最大的极差
        
        # minPriceIndexes = []
        # if(len(prices) < 2):
        #     return 0
        # minPrice = prices[0]
        # # 采集所有最小值所在下标
        # for i in range(1, len(prices)):
        #     if(prices[i] > prices[i-1]):
        #         minPriceIndexes.append(i-1)
        #     else:
        #         minPrice = prices[i]
                
        # # 找到每个最小值下标后区间内的最大值
        # maxPrices = []
        # for j in range(len(minPriceIndexes)):
        #     maxPrices.append(max(prices[minPriceIndexes[j]:]))

        # # 找到各个区间内的极差
        # distancePrices = []
        # for k in range(len(minPriceIndexes)):
        #     distance = maxPrices[k] - prices[minPriceIndexes[k]]
        #     distancePrices.append(distance)
        
        # if(len(distancePrices) == 0):
        #     return 0
        # # 返回最大极差
        # return max(distancePrices)
        
        # 方法二
        if(len(prices) < 2):
            return 0
        
        minPrice = prices[0]
        maxProfit = 0
        for price in prices:
            if price < minPrice:
                minPrice = price
            if price - minPrice > maxProfit:
                maxProfit = price - minPrice
        return maxProfit

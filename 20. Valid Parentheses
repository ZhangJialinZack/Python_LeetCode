20. Valid Parentheses
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.


Python代码：
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if(len(s) < 2):   # 字符串长度小于2  一定不是有效字符串
            return False
        
        leftArr = ['(', '{', '[']
        rightArr = [')','}',']']
        tmpS = [s[0]]    # 初始化数组 放进去字符串首字符  然后将接下来的字符一一添加比较
        i = 1
        while(i < len(s)):
            if(s[i] in rightArr):   # 如果是右括号
                rightIndex = rightArr.index(s[i])
                if(len(tmpS) > 0 and tmpS[-1] == leftArr[rightIndex]):  # 先判断和它左边紧挨着的是不是对应的左括号
                    tmpS.pop()  # 如果是对应的左括号 将数组最后一个字符干掉
                else:
                    return False # 如果不是对应的 那么一定不是有效的字符串
            else:
                tmpS.append(s[i]) # 左括号的情况  直接添加进数组
            i += 1
            
        if(len(tmpS) == 0): # 最终这个数组如果完全被干掉  说明是有效的字符串  否则无效
            return True 
        else:
            return False

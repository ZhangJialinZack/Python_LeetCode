15. 3Sum
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]


Python代码：
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        result = []
        i= 0
        nums.sort()
        while(i < len(nums)-2):
            if(i > 0 and nums[i] == nums[i-1]):  # nums[i]排重
                i += 1
                continue
            
            j = i+1  # j的下标从i+1开始向右
            k = len(nums)-1 # k的下标从末尾开始向左
            while(j < k):
                val = nums[i] + nums[j] + nums[k]
                if(val == 0):
                    result.append([nums[i], nums[j], nums[k]])
                    j += 1
                    k -= 1
                    while(nums[j] == nums[j-1] and j < k):# nums[j]排重
                        j += 1
                    while(nums[k] == nums[k+1] and j < k):# nums[k]排重
                        k -= 1
                elif(val < 0):
                    j += 1
                    while(nums[j] == nums[j-1] and j < k):# nums[j]排重
                        j += 1
                else:
                    k -= 1
                    while(nums[k] == nums[k+1] and j < k):# nums[k]排重
                        k -= 1
            i += 1
        return result

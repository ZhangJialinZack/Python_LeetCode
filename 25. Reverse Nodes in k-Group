25. Reverse Nodes in k-Group
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5


Python代码：
class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head or not head.next or k < 2:
            return head
            
        
        # 先找到目标节点
        dummy = ListNode(0)
        dummy.next = head
        p = dummy
        nodes = []
        temp = k
        while p.next:
            while temp > 0 and p.next:
                p = p.next
                temp -= 1
            if temp == 0:
                nodes += [p]
                temp = k
        
        # 对链表进行k反转
        p = dummy
        for node in nodes:
            nextNode = node.next
            node.next = None
            p.next = self.reverseList(head)
            p = head
            head.next = nextNode
            head = head.next
            
        return dummy.next
            
    def reverseList(self, head):
        temp = None
        # p追踪当前的节点
        p = head
        # head每次前进一步 参与循环
        while head:
            p = head
            head = head.next
            p.next = temp
            temp = p
        # 最终p指向原先链表的最后一个节点
        return p

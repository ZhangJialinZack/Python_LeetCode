350. Intersection of Two Arrays II
Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

Note:
Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:
What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?


Python代码：
class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        # 方法一  统计数组中元素出现次数
        
        # 统计出两个数组中不同数字出现的次数
        # c1 = collections.Counter(nums1)
        # c2 = collections.Counter(nums2)
        # # 遍历数组交集  （交集内数据不重复）
        # numsSet = set(nums1) & set(nums2)
        # solution = []
        # for num in numsSet:
        #     solution += [num] * min(c1[num], c2[num]) # 某数据出现在原数组中较少的次数  即原先两个数组的交集中出现的次数
            
        # return solution
        
        
        # 方法二 双指针顺序跟踪
        
        # 对两个数组进行排序
        nums1.sort()
        nums2.sort()
        # 设定两个指针从头进行跟踪
        p1 = p2 = 0
        solution = []
        while p1 < len(nums1) and p2 < len(nums2):
            if nums1[p1] < nums2[p2]:   # 较小数据 对应指针+1
                p1 += 1
            elif nums1[p1] > nums2[p2]: # 较小数据 对应指针+1
                p2 += 1
            else:
                solution += [nums1[p1]] # 两数相等 两指针都+1
                p1 += 1
                p2 += 1
        
        return solution
        

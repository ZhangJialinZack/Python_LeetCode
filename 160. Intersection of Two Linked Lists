160. Intersection of Two Linked Lists
Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.


Python代码：
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        # 如果有一个为None 则返回None
        if headA == None or headB == None:
            return None
            
        # p1 p2记录头指针
        p1 = headA
        p2 = headB
            
        # 遍历到末尾 找到两个链表的长度
        len1 = 1
        while p1.next:
            len1 += 1
            p1 = p1.next
        
        len2 = 1
        while p2.next:
            len2 += 1
            p2 = p2.next
            
        # 如果到最后未找到交叉点 返回None
        if p1 != p2:
            return None
            
        # p1 p2记录头指针
        p1 = headA
        p2 = headB
        
        # 较长的链表先走差异的步伐 使得链表步伐同步
        if len1 >= len2:
            step = len1 - len2
            while step > 0:
                p1 = p1.next
                step -= 1
        else:
            step = len2 - len1
            while step > 0:
                p2 = p2.next
                step -= 1
        
        # 然后一起出发找公共节点
        while p1 != p2:
            p1 = p1.next
            p2 = p2.next
        
        return p1
